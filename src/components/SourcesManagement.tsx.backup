import React, { useState, useEffect } from 'react';
import { AI_TOOLS } from '@/lib/catalog/aiTools';
import { n8nApiClient } from '@/lib/n8nApi';
import { WorkflowBrowser } from './WorkflowBrowser';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { AppIconCard, AppIcon } from '@/components/AppIcon';
import { getToolDescription, getToolFeatures } from '@/lib/catalog/aiTools';
import { 
  Plus, 
  Edit, 
  Trash2, 
  ExternalLink, 
  Database, 
  Bot, 
  Workflow, 
  RefreshCw,
  CheckCircle,
  AlertCircle,
  Globe,
  Github,
  BookOpen
} from 'lucide-react';

interface WorkflowSource {
  id: string;
  name: string;
  type: 'github' | 'api' | 'manual';
  url: string;
  description: string;
  category: string;
  workflowCount: number;
  lastUpdated: string;
  status: 'active' | 'inactive' | 'error';
}

interface AIAgentSource {
  id: string;
  name: string;
  type: 'catalog' | 'api' | 'manual';
  url?: string;
  description: string;
  category: string;
  agentCount: number;
  lastUpdated: string;
  status: 'active' | 'inactive' | 'error';
}

interface SourcesManagementProps {
  lang?: 'de' | 'en';
}

export default function SourcesManagement({ lang = 'de' }: SourcesManagementProps) {
  const [workflowSources, setWorkflowSources] = useState<WorkflowSource[]>([]);
  const [aiAgentSources, setAIAgentSources] = useState<AIAgentSource[]>([]);
  const [aiTools, setAITools] = useState<typeof AI_TOOLS>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [showAddDialog, setShowAddDialog] = useState(false);
  const [editingSource, setEditingSource] = useState<WorkflowSource | AIAgentSource | null>(null);
  const [selectedTool, setSelectedTool] = useState<typeof AI_TOOLS[0] | null>(null);
  const [isToolModalOpen, setIsToolModalOpen] = useState(false);
  const [newSource, setNewSource] = useState({
    name: '',
    type: 'github' as 'github' | 'api' | 'manual' | 'catalog',
    url: '',
    description: '',
    category: '',
    sourceType: 'workflow' as 'workflow' | 'ai-agent'
  });

  // Load real sources from actual implementations
  useEffect(() => {
    const loadSources = async () => {
      setIsLoading(true);
      
      try {
        // Load real workflow sources
        const workflowSourcesData: WorkflowSource[] = [
          {
            id: '1',
            name: 'n8n Community Workflows',
            type: 'github',
            url: 'https://github.com/Zie619/n8n-workflows',
            description: 'Community-driven n8n workflow collection with ready-to-use workflows for automation',
            category: 'General',
            workflowCount: 0, // Will be updated with real count
            lastUpdated: new Date().toISOString().split('T')[0],
            status: 'active'
          },
          {
            id: '2',
            name: 'n8n Free Templates (AI-Enhanced)',
            type: 'github',
            url: 'https://github.com/wassupjay/n8n-free-templates',
            description: '200+ plug-and-play n8n workflows that fuse classic automation with AI stackâ€”vector DBs, embeddings, and LLMs',
            category: 'AI-Enhanced',
            workflowCount: 200,
            lastUpdated: new Date().toISOString().split('T')[0],
            status: 'active'
          }
        ];

        // Get real workflow count from n8n API
        try {
          const totalWorkflows = await n8nApiClient.getTotalWorkflowCount();
          workflowSourcesData[0].workflowCount = totalWorkflows;
        } catch (error) {
          console.warn('Could not fetch workflow count:', error);
          workflowSourcesData[0].workflowCount = 2053; // Real count from repository documentation
        }

        setWorkflowSources(workflowSourcesData);

        // Load real AI agent sources (Repositories of AI Agents)
        const aiAgentSourcesData: AIAgentSource[] = [
          {
            id: '1',
            name: 'AutoGPT Repository',
            type: 'repository',
            url: 'https://github.com/Significant-Gravitas/AutoGPT',
            description: 'AutoGPT - An experimental open-source attempt to make GPT-4 fully autonomous',
            category: 'General AI Agents',
            agentCount: 0, // Framework, not pre-built agents
            lastUpdated: new Date().toISOString().split('T')[0],
            status: 'active'
          },
          {
            id: '2',
            name: 'LangChain Agents',
            type: 'repository',
            url: 'https://github.com/langchain-ai/langchain',
            description: 'LangChain - Building applications with LLMs through composability',
            category: 'AI Framework',
            agentCount: 0, // Framework with examples, not pre-built agents
            lastUpdated: new Date().toISOString().split('T')[0],
            status: 'active'
          },
          {
            id: '3',
            name: 'CrewAI Framework',
            type: 'repository',
            url: 'https://github.com/joaomdmoura/crewAI',
            description: 'CrewAI - Framework for orchestrating role-playing, autonomous AI agents',
            category: 'Multi-Agent Systems',
            agentCount: 0, // Framework with examples, not pre-built agents
            lastUpdated: new Date().toISOString().split('T')[0],
            status: 'active'
          },
          {
            id: '4',
            name: 'OpenAI Assistants API',
            type: 'api',
            url: 'https://platform.openai.com/docs/assistants/overview',
            description: 'OpenAI Assistants API - Build AI assistants that can use tools and access knowledge',
            category: 'AI Assistants',
            agentCount: 0, // API to create assistants, not pre-built agents
            lastUpdated: new Date().toISOString().split('T')[0],
            status: 'active'
          },
          {
            id: '5',
            name: 'Microsoft Autogen',
            type: 'repository',
            url: 'https://github.com/microsoft/autogen',
            description: 'AutoGen - A framework that enables development of LLM applications using multiple agents',
            category: 'Multi-Agent Systems',
            agentCount: 0, // Framework with examples, not pre-built agents
            lastUpdated: new Date().toISOString().split('T')[0],
            status: 'active'
          },
          {
            id: '6',
            name: 'Hugging Face Spaces',
            type: 'repository',
            url: 'https://huggingface.co/spaces',
            description: 'Hugging Face Spaces - Community-driven AI agents and applications',
            category: 'Community Agents',
            agentCount: 0, // Community platform, exact count varies
            lastUpdated: new Date().toISOString().split('T')[0],
            status: 'active'
          },
          {
            id: '7',
            name: 'AgentGPT',
            type: 'repository',
            url: 'https://github.com/reworkd/AgentGPT',
            description: 'AgentGPT - Assemble, configure, and deploy autonomous AI agents in your browser',
            category: 'Web-based Agents',
            agentCount: 0, // Web interface to create agents, not pre-built agents
            lastUpdated: new Date().toISOString().split('T')[0],
            status: 'active'
          },
          {
            id: '8',
            name: 'SuperAGI',
            type: 'repository',
            url: 'https://github.com/TransformerOptimus/SuperAGI',
            description: 'SuperAGI - A dev-first open source autonomous AI agent framework',
            category: 'Autonomous Agents',
            agentCount: 0, // Framework with examples, not pre-built agents
            lastUpdated: new Date().toISOString().split('T')[0],
            status: 'active'
          }
        ];

        setAIAgentSources(aiAgentSourcesData);

        // Load AI Tools (general tools for recommendations)
        setAITools(AI_TOOLS);

      } catch (error) {
        console.error('Error loading sources:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadSources();
  }, []);

  const refreshSources = async () => {
    setIsRefreshing(true);
    
    try {
      // Refresh workflow sources
      const totalWorkflows = await n8nApiClient.getTotalWorkflowCount();
      setWorkflowSources(prev => prev.map(source => ({
        ...source,
        workflowCount: totalWorkflows,
        lastUpdated: new Date().toISOString().split('T')[0]
      })));

      // Refresh AI agent sources
      setAIAgentSources(prev => prev.map(source => ({
        ...source,
        agentCount: source.id === '1' ? AI_TOOLS.length : source.agentCount,
        lastUpdated: new Date().toISOString().split('T')[0]
      })));

    } catch (error) {
      console.error('Error refreshing sources:', error);
    } finally {
      setIsRefreshing(false);
    }
  };

  const addSource = () => {
    if (newSource.sourceType === 'workflow') {
      const source: WorkflowSource = {
        id: Date.now().toString(),
        name: newSource.name,
        type: newSource.type as 'github' | 'api' | 'manual',
        url: newSource.url,
        description: newSource.description,
        category: newSource.category,
        workflowCount: 0,
        lastUpdated: new Date().toISOString().split('T')[0],
        status: 'active'
      };
      setWorkflowSources(prev => [...prev, source]);
    } else {
      const source: AIAgentSource = {
        id: Date.now().toString(),
        name: newSource.name,
        type: newSource.type as 'catalog' | 'api' | 'manual',
        url: newSource.url,
        description: newSource.description,
        category: newSource.category,
        agentCount: 0,
        lastUpdated: new Date().toISOString().split('T')[0],
        status: 'active'
      };
      setAIAgentSources(prev => [...prev, source]);
    }
    
    setNewSource({
      name: '',
      type: 'github',
      url: '',
      description: '',
      category: '',
      sourceType: 'workflow'
    });
    setShowAddDialog(false);
  };

  const deleteSource = (id: string, type: 'workflow' | 'ai-agent') => {
    if (type === 'workflow') {
      setWorkflowSources(prev => prev.filter(s => s.id !== id));
    } else {
      setAIAgentSources(prev => prev.filter(s => s.id !== id));
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'inactive':
        return <AlertCircle className="w-4 h-4 text-yellow-500" />;
      case 'error':
        return <AlertCircle className="w-4 h-4 text-red-500" />;
      default:
        return <AlertCircle className="w-4 h-4 text-gray-500" />;
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'github':
        return <Github className="w-4 h-4" />;
      case 'api':
        return <Globe className="w-4 h-4" />;
      case 'manual':
        return <BookOpen className="w-4 h-4" />;
      case 'catalog':
        return <Database className="w-4 h-4" />;
      default:
        return <Database className="w-4 h-4" />;
    }
  };

  const getStatusBadge = (status: string) => {
    const variants = {
      active: 'default',
      inactive: 'secondary',
      error: 'destructive'
    } as const;

    const labels = {
      active: lang === 'de' ? 'Aktiv' : 'Active',
      inactive: lang === 'de' ? 'Inaktiv' : 'Inactive',
      error: lang === 'de' ? 'Fehler' : 'Error'
    };

    return (
      <Badge variant={variants[status as keyof typeof variants] || 'secondary'}>
        {labels[status as keyof typeof labels] || status}
      </Badge>
    );
  };

  const getAIToolsByCategory = () => {
    const categories = AI_TOOLS.reduce((acc, tool) => {
      if (!acc[tool.category]) {
        acc[tool.category] = [];
      }
      acc[tool.category].push(tool);
      return acc;
    }, {} as Record<string, typeof AI_TOOLS>);

    return Object.entries(categories).map(([category, tools]) => ({
      category,
      count: tools.length,
      tools: tools.slice(0, 3) // Show first 3 tools
    }));
  };

  const openToolModal = (tool: typeof AI_TOOLS[0]) => {
    setSelectedTool(tool);
    setIsToolModalOpen(true);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <RefreshCw className="w-6 h-6 animate-spin mr-2" />
        <span>{lang === 'de' ? 'Lade Quellen...' : 'Loading sources...'}</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">
            {lang === 'de' ? 'Quellen-Verwaltung' : 'Sources Management'}
          </h2>
          <p className="text-gray-600">
            {lang === 'de' 
              ? 'Verwalten Sie Workflow- und AI-Agent-Quellen' 
              : 'Manage workflow and AI agent sources'
            }
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            onClick={refreshSources}
            disabled={isRefreshing}
          >
            <RefreshCw className={`w-4 h-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />
            {lang === 'de' ? 'Aktualisieren' : 'Refresh'}
          </Button>
          <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="w-4 h-4 mr-2" />
                {lang === 'de' ? 'Quelle hinzufÃ¼gen' : 'Add Source'}
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[500px]">
              <DialogHeader>
                <DialogTitle>
                  {lang === 'de' ? 'Neue Quelle hinzufÃ¼gen' : 'Add New Source'}
                </DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="sourceType">
                    {lang === 'de' ? 'Quellentyp' : 'Source Type'}
                  </Label>
                  <Select
                    value={newSource.sourceType}
                    onValueChange={(value: 'workflow' | 'ai-agent') => 
                      setNewSource(prev => ({ ...prev, sourceType: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="workflow">
                        <div className="flex items-center">
                          <Workflow className="w-4 h-4 mr-2" />
                          {lang === 'de' ? 'Workflow' : 'Workflow'}
                        </div>
                      </SelectItem>
                      <SelectItem value="ai-agent">
                        <div className="flex items-center">
                          <Bot className="w-4 h-4 mr-2" />
                          {lang === 'de' ? 'AI-Agent' : 'AI Agent'}
                        </div>
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="name">
                    {lang === 'de' ? 'Name' : 'Name'}
                  </Label>
                  <Input
                    id="name"
                    value={newSource.name}
                    onChange={(e) => setNewSource(prev => ({ ...prev, name: e.target.value }))}
                    placeholder={lang === 'de' ? 'Quellenname eingeben' : 'Enter source name'}
                  />
                </div>
                <div>
                  <Label htmlFor="type">
                    {lang === 'de' ? 'Typ' : 'Type'}
                  </Label>
                  <Select
                    value={newSource.type}
                    onValueChange={(value) => 
                      setNewSource(prev => ({ ...prev, type: value as any }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {newSource.sourceType === 'workflow' ? (
                        <>
                          <SelectItem value="github">GitHub</SelectItem>
                          <SelectItem value="api">API</SelectItem>
                          <SelectItem value="manual">Manuell</SelectItem>
                        </>
                      ) : (
                        <>
                          <SelectItem value="catalog">Katalog</SelectItem>
                          <SelectItem value="api">API</SelectItem>
                          <SelectItem value="manual">Manuell</SelectItem>
                        </>
                      )}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="url">
                    {lang === 'de' ? 'URL (optional)' : 'URL (optional)'}
                  </Label>
                  <Input
                    id="url"
                    value={newSource.url}
                    onChange={(e) => setNewSource(prev => ({ ...prev, url: e.target.value }))}
                    placeholder={lang === 'de' ? 'URL eingeben' : 'Enter URL'}
                  />
                </div>
                <div>
                  <Label htmlFor="category">
                    {lang === 'de' ? 'Kategorie' : 'Category'}
                  </Label>
                  <Input
                    id="category"
                    value={newSource.category}
                    onChange={(e) => setNewSource(prev => ({ ...prev, category: e.target.value }))}
                    placeholder={lang === 'de' ? 'Kategorie eingeben' : 'Enter category'}
                  />
                </div>
                <div>
                  <Label htmlFor="description">
                    {lang === 'de' ? 'Beschreibung' : 'Description'}
                  </Label>
                  <Textarea
                    id="description"
                    value={newSource.description}
                    onChange={(e) => setNewSource(prev => ({ ...prev, description: e.target.value }))}
                    placeholder={lang === 'de' ? 'Beschreibung eingeben' : 'Enter description'}
                    rows={3}
                  />
                </div>
                <div className="flex justify-end gap-2">
                  <Button variant="outline" onClick={() => setShowAddDialog(false)}>
                    {lang === 'de' ? 'Abbrechen' : 'Cancel'}
                  </Button>
                  <Button onClick={addSource}>
                    {lang === 'de' ? 'HinzufÃ¼gen' : 'Add'}
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Tabs */}
      <Tabs defaultValue="workflows" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="workflows" className="flex items-center gap-2">
            <Workflow className="w-4 h-4" />
            {lang === 'de' ? 'Workflows' : 'Workflows'}
            <Badge variant="secondary">{workflowSources.length}</Badge>
          </TabsTrigger>
          <TabsTrigger value="workflow-browser" className="flex items-center gap-2">
            <Search className="w-4 h-4" />
            {lang === 'de' ? 'Workflow-Browser' : 'Workflow Browser'}
            <Badge variant="secondary">2,053</Badge>
          </TabsTrigger>
          <TabsTrigger value="ai-agents" className="flex items-center gap-2">
            <Bot className="w-4 h-4" />
            {lang === 'de' ? 'AI-Agent-APIs' : 'AI Agent APIs'}
            <Badge variant="secondary">{aiAgentSources.length}</Badge>
          </TabsTrigger>
          <TabsTrigger value="ai-tools" className="flex items-center gap-2">
            <Database className="w-4 h-4" />
            {lang === 'de' ? 'AI-Tools-Katalog' : 'AI Tools Catalog'}
            <Badge variant="secondary">{aiTools.length}</Badge>
          </TabsTrigger>
        </TabsList>

        <TabsContent value="workflows" className="space-y-4">
          <div className="grid gap-4">
            {workflowSources.map((source) => (
              <Card key={source.id}>
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {getTypeIcon(source.type)}
                      <div>
                        <CardTitle className="text-lg">{source.name}</CardTitle>
                        <p className="text-sm text-gray-600">{source.description}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      {getStatusIcon(source.status)}
                      {getStatusBadge(source.status)}
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <Label className="text-gray-500">Type</Label>
                      <p className="font-medium capitalize">{source.type}</p>
                    </div>
                    <div>
                      <Label className="text-gray-500">Category</Label>
                      <p className="font-medium">{source.category}</p>
                    </div>
                    <div>
                      <Label className="text-gray-500">Workflows</Label>
                      <p className="font-medium">{source.workflowCount.toLocaleString()}</p>
                    </div>
                    <div>
                      <Label className="text-gray-500">Last Updated</Label>
                      <p className="font-medium">{source.lastUpdated}</p>
                    </div>
                  </div>
                  <div className="mt-4 flex gap-2">
                    <Button variant="outline" size="sm" asChild>
                      <a href={source.url} target="_blank" rel="noopener noreferrer">
                        View Source
                      </a>
                    </Button>
                    <Button variant="outline" size="sm">
                      Manage
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="workflow-browser" className="space-y-4">
          <WorkflowBrowser />
        </TabsContent>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => deleteSource(source.id, 'workflow')}
                    >
                      <Trash2 className="w-4 h-4 mr-2" />
                      {lang === 'de' ? 'LÃ¶schen' : 'Delete'}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="ai-agents" className="space-y-4">
          <div className="grid gap-4">
            {aiAgentSources.map((source) => (
              <Card key={source.id}>
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {getTypeIcon(source.type)}
                      <div>
                        <CardTitle className="text-lg">{source.name}</CardTitle>
                        <p className="text-sm text-gray-600">{source.description}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      {getStatusIcon(source.status)}
                      {getStatusBadge(source.status)}
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <span className="font-medium">
                        {lang === 'de' ? 'Kategorie:' : 'Category:'}
                      </span>
                      <br />
                      <Badge variant="outline">{source.category}</Badge>
                    </div>
                    <div>
                      <span className="font-medium">
                        {lang === 'de' ? 'Agenten:' : 'Agents:'}
                      </span>
                      <br />
                      <span className="text-lg font-bold text-primary">{source.agentCount}</span>
                    </div>
                    <div>
                      <span className="font-medium">
                        {lang === 'de' ? 'Aktualisiert:' : 'Updated:'}
                      </span>
                      <br />
                      <span>{source.lastUpdated}</span>
                    </div>
                    <div>
                      <span className="font-medium">
                        {lang === 'de' ? 'Typ:' : 'Type:'}
                      </span>
                      <br />
                      <Badge variant="outline">{source.type}</Badge>
                    </div>
                  </div>
                  
                  {/* Show AI Tools breakdown for catalog source */}
                  
                  {source.url && (
                    <div className="mt-4 flex items-center gap-2">
                      <ExternalLink className="w-4 h-4" />
                      <a 
                        href={source.url} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-sm text-blue-600 hover:underline"
                      >
                        {source.url}
                      </a>
                    </div>
                  )}
                  <div className="mt-4 flex gap-2">
                    <Button variant="outline" size="sm">
                      <Edit className="w-4 h-4 mr-2" />
                      {lang === 'de' ? 'Bearbeiten' : 'Edit'}
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => deleteSource(source.id, 'ai-agent')}
                    >
                      <Trash2 className="w-4 h-4 mr-2" />
                      {lang === 'de' ? 'LÃ¶schen' : 'Delete'}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="ai-tools" className="space-y-4">
          <div className="mb-4">
            <h3 className="text-lg font-semibold mb-2">
              {lang === 'de' ? 'AI-Tools-Katalog' : 'AI Tools Catalog'}
            </h3>
            <p className="text-gray-600 text-sm">
              {lang === 'de' 
                ? 'Allgemeine AI-Tools, die je nach Analyse vorgeschlagen werden'
                : 'General AI tools that are suggested based on analysis'
              }
            </p>
          </div>
          
          <div className="grid gap-4">
            {getAIToolsByCategory().map(({ category, count, tools }) => (
              <Card key={category}>
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Database className="w-5 h-5 text-primary" />
                      <div>
                        <CardTitle className="text-lg">{category}</CardTitle>
                        <p className="text-sm text-gray-600">
                          {lang === 'de' 
                            ? `${count} AI-Tools verfÃ¼gbar`
                            : `${count} AI tools available`
                          }
                        </p>
                      </div>
                    </div>
                    <Badge variant="secondary">{count}</Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                      {tools.map((tool) => (
                        <AppIconCard
                          key={tool.id}
                          tool={tool}
                          lang={lang}
                          className="h-full"
                          onClick={() => openToolModal(tool)}
                        />
                      ))}
                    </div>
                    {count > 3 && (
                      <div className="text-center pt-2">
                        <Badge variant="outline">
                          {lang === 'de' 
                            ? `+${count - 3} weitere Tools`
                            : `+${count - 3} more tools`
                          }
                        </Badge>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>

      {/* AI Tool Detail Modal */}
      <Dialog open={isToolModalOpen} onOpenChange={setIsToolModalOpen}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-3">
              {selectedTool && <AppIcon tool={selectedTool} size="md" />}
              <span>{selectedTool?.name}</span>
            </DialogTitle>
          </DialogHeader>
          
          {selectedTool && (
            <div className="space-y-4">
              {/* Description */}
              <div>
                <h4 className="font-medium text-foreground mb-2">{lang === 'de' ? 'Beschreibung' : 'Description'}</h4>
                <p className="text-sm text-muted-foreground">{getToolDescription(selectedTool, lang)}</p>
              </div>

              {/* Details Grid */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium text-foreground mb-2">{lang === 'de' ? 'Kategorie' : 'Category'}</h4>
                  <p className="text-sm text-muted-foreground">{selectedTool.category}</p>
                </div>
                <div>
                  <h4 className="font-medium text-foreground mb-2">{lang === 'de' ? 'Branchen' : 'Industries'}</h4>
                  <p className="text-sm text-muted-foreground">{selectedTool.industry.join(', ')}</p>
                </div>
                <div>
                  <h4 className="font-medium text-foreground mb-2">{lang === 'de' ? 'Preismodell' : 'Pricing'}</h4>
                  <p className="text-sm text-muted-foreground">{selectedTool.pricing}</p>
                </div>
                <div>
                  <h4 className="font-medium text-foreground mb-2">{lang === 'de' ? 'Automatisierungspotenzial' : 'Automation Potential'}</h4>
                  <div className="flex items-center gap-2">
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-primary h-2 rounded-full transition-all duration-300"
                        style={{ width: `${selectedTool.automationPotential}%` }}
                      ></div>
                    </div>
                    <span className="text-sm font-medium">{selectedTool.automationPotential}%</span>
                  </div>
                </div>
              </div>

              {/* Features */}
              <div>
                <h4 className="font-medium text-foreground mb-2">{lang === 'de' ? 'Features' : 'Features'}</h4>
                <div className="flex flex-wrap gap-2">
                  {getToolFeatures(selectedTool, lang).map((feature, index) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      {feature}
                    </Badge>
                  ))}
                </div>
              </div>

              {/* Website Link */}
              <div className="flex justify-end">
                <a 
                  href={selectedTool.website} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="inline-flex items-center gap-2 text-sm text-primary hover:underline"
                >
                  <span>{lang === 'de' ? 'Website besuchen' : 'Visit Website'}</span>
                  <ExternalLink className="w-4 h-4" />
                </a>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}
